{"version":3,"sources":["Components/Break.js","Components/Timer.js","Components/Icons.js","App.js","serviceWorker.js","index.js"],"names":["breakElements","props","className","id","onClick","click","type","size","color","clickInc","sessionDecClick","SessionIncClick","Timer","console","log","timer","style","value","breakState","sessionLength","timerval","icon","start","reset","App","decrementBreakHAndler","state","breakLength","setState","incrementBreakHAndler","incrementSessionHandler","time","sessionDecHandler","startedHandler","truOrFalse","resetHandler","timeColor","document","getElementById","textContent","url","audio","Audio","this","play","pause","myInterval","setInterval","startTimer","clearInterval","realTime","remainingTime","minutes","Math","floor","seconds","children","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe7279d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Break.css'\r\nimport { AiOutlineArrowUp} from \"react-icons/ai\";\r\nimport { AiOutlineArrowDown} from \"react-icons/ai\";\r\n//here i got clikable Components to control break and it's length\r\n\r\nconst breakElements = (props) =>{\r\n    return(\r\n        <div className=\"arrows\">\r\n<label id='break-label'>Break Length</label>\r\n<label id='session-label'>Session Length</label>\r\n\r\n\r\n\r\n<AiOutlineArrowDown onClick={props.click} type=\"button\" id=\"break-decrement\" size='40px' color='green'/> \r\n{/* elements for decrement and increment break  */}\r\n    {/* <label id=\"break-length\" value={props.value} >{props.breakState}</label> */}\r\n<AiOutlineArrowUp onClick={props.clickInc} type=\"button\" id=\"break-increment\"  size='40px' color='green'/>\r\n\r\n\r\n\r\n<AiOutlineArrowDown onClick={props.sessionDecClick} type=\"button\" id=\"session-decrement\" size='40px' color='green'/>\r\n{/* elements for increment and decrement  session */}\r\n{/* <label id=\"session-length\">{props.sessionLength}</label> */}\r\n<AiOutlineArrowUp  onClick={props.SessionIncClick} type=\"button\" id=\"session-increment\" size='40px' color='green'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default breakElements","import React from 'react';\r\nimport './Timer.css';\r\n\r\n\r\nfunction Timer(props){\r\n    \r\n   \r\n\r\n\r\n \r\n    console.log(typeof props.timer)\r\n    return (\r\n        <div className='timerZone'>\r\n\r\n    <label id='timer-label' style={props.style}> Session   </label>\r\n\r\n <div className=\"breakArowAp\" id=\"one\">\r\n <label id=\"break-length\" value={props.value} >{props.breakState}</label>\r\n </div>\r\n\r\n <div className=\"breakArowAp\" id=\"sesTwo\">\r\n <label id=\"session-length\">{props.sessionLength}</label>\r\n </div>\r\n <div className=\"timeViewer\" ></div>\r\n    <span className=\"time\" id=\"time-left\" value={props.timerval} style={props.style} > {props.timer} </span>\r\n   \r\n    <p className=\"by\">Designed and Coded By</p>\r\n    <p className=\"kakha\"><em>Kakha Gujejiani</em></p>\r\n        </div>\r\n    )\r\n \r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport './Icons.css'\r\nimport { AiFillCaretRight} from \"react-icons/ai\";\r\nimport { AiFillInteraction} from \"react-icons/ai\";\r\nimport {AiOutlinePauseCircle} from \"react-icons/ai\";\r\n\r\n\r\n\r\n//icons start-pause and reset\r\nconst icon = (props) => {\r\n\r\n    return (\r\n        <div className='icons'>\r\n            <AiFillCaretRight id=\"start_stop\" color='yellow' size='60px'  onClick={props.start} />\r\n            <AiOutlinePauseCircle color='white' size='90px' onClick={props.start} />\r\n            <AiFillInteraction id=\"reset\" color='yellow' size='55px' onClick = {props.reset} /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default icon","import React, {Component} from 'react';\nimport Break from './Components/Break';\nimport './App.css';\nimport Timer from './Components/Timer';\nimport Icons from './Components/Icons';\n\nclass  App extends Component{\n  constructor() {\n    super();\n    this.state ={\n      \n\n      breakLength: 5,\n      sessionLength: 25,\n      time: 1500,\n      start: false,\n      timeColor: {color: 'white'}\n    }\n    this.url = \"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\";\n    this.audio = new Audio(this.url);\n  }\n    decrementBreakHAndler = () =>{\n  \n  if(this.state.breakLength > 1 && !this.state.start){\n    this.setState({\n      breakLength: this.state.breakLength -1\n      //whith this I decrementing the break\n    })\n    \n    }\n   \n}\nincrementBreakHAndler = () => {\n  //whith this I incrementing the break\n  if(this.state.breakLength <60 && !this.state.start){\n    this.setState({\n      breakLength: this.state.breakLength +1,\n   \n      \n      //whith this I decrementing the break\n    })\n    }\n    \n \n}\n\n\nincrementSessionHandler = () =>{\nif(this.state.time < 3600 && !this.state.start){\n \nthis.setState({\n  sessionLength: this.state.sessionLength + 1,\n  time: this.state.sessionLength * 60 + 60 \n  //whith this i incrementing the session length by + 1  and incrementing timer by one minute\n})\n}\n\n}\n\nsessionDecHandler = () =>{\n   if(this.state.time > 0 && !this.state.start && this.state.sessionLength > 1){\n     this.setState({\n       sessionLength: this.state.sessionLength - 1,\n       time: this.state.sessionLength * 60 - 60 \n       //whith this I decrementing the session length by + 1  and decrementing timer by one minute\n     })\n     }\n\n}\n\n\n\n\n\nstartTimer(){\n  //let status = this.state.start\nif(this.state.time>-1 && this.state.start ) {\n  this.setState({\n    \n    time: this.state.time - 1\n  })\n}\nif(this.state.time < 60 && this.state.start){\n  this.setState({\n    timeColor: {color: 'red'}\n  \n  })\n  this.audio.play()\n}else{\n  this.setState({\n    timeColor: {color: 'white' }\n    \n  })\n  this.audio.pause()\n  if(this.state.start){\n    this.setState({})\n  }\n}\n\nif(this.state.time < 0){\n  \n  document.getElementById('timer-label').textContent=\"Break\"\n  this.setState({\n    time: this.state.breakLength * 60\n  })\n\n  }else if(this.state.time < 61){\n    this.setState({\n      timeColor: {color: 'red'}\n    })\n  }else if(this.state.time ===1){\n    \n    this.setState({\n      start: false\n    })\n  }\n\n\n}\n\n\n\n\nstartedHandler = ()=>{\n  // start and pause handler\n  let truOrFalse = this.state.start\n \n  \n    this.setState({\n      start: !truOrFalse\n    })\n  \n\n}\n\nresetHandler = () =>{\n\n  this.setState({\n    time: 25 * 60,\n    breakLength: 5,\n    sessionLength: 25,\n    start: false,\n    timeColor: {color: 'white'}\n  })\n  document.getElementById(\"timer-label\").textContent =\"Session\"\n  \n}\n\n\ncomponentDidMount(){\n  \n\n  this.myInterval = setInterval(()=> {\n    if(this.state.start){\n      this.startTimer()\n\n    }\n    \n  }, 1000)\n  \n}\n\ncomponentWillUnmount(){\n \n  clearInterval(this.myInterval)\n}\n\n  render(){\n\n  \n const children = (remainingTime) => {\n     //const hours = Math.floor(remainingTime / 3600)\n     let minutes = Math.floor(remainingTime / 60)\n     let seconds = remainingTime - minutes * 60\n     seconds = seconds < 10 ? '0' + seconds : seconds;\n     minutes = minutes < 10 ? '0' + minutes : minutes;\n     return minutes + ':' + seconds\n    \n   }\n   let realTime = children(this.state.time)\n  \n \n  return ( \n    <div className=\"App\">\n      <audio id=\"beef\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"/>\n      <h1  >Promodo Clock</h1>\n      \n      <Break  SessionIncClick={this.incrementSessionHandler}\n       clickInc={this.incrementBreakHAndler} click={this.decrementBreakHAndler} sessionDecClick={this.sessionDecHandler}/>\n\n      <Timer timerval={realTime} timer={realTime} style={this.state.timeColor} breakState={this.state.breakLength}  sessionLength={this.state.sessionLength}/>\n\n      <Icons start={this.startedHandler} reset ={this.resetHandler} value={this.state.breakLength}/> \n     \n    </div>\n  );\n}\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}